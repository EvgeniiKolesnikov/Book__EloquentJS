console.log('Chapter 20. Excercises');  // Skipped all exercises

//#region Chapter 20.1 Инструмент поиска 
// В Uniх-системах есть инструмент командной строки, называемый grep,
// который можно использовать для быстрого поиска файлов по регулярному
// выражению.
// Напишите сценарий для Node, который можно запустить из командной строки
//  и который действует как grep. Этот сценарий рассматривает свой первый
// аргумент командной строки как регулярное выражение, а все остальные
// аргументы - как файлы для поиска. Сценарий должен выводить имена всех
// файлов, чье содержимое соответствует регулярному выражению.
// Когда это заработает, расширьте сценарий так, чтобы, если один из 
// аргументов является каталогом, просматривались все файлы этого 
// каталога и его подкаталогов. 
console.log('=== Chapter 2.1 Инструмент поиска');
//#endregion

//#region Chapter 20.2 Создание каталога
// Метод DELEТE нашего файлового сервера позволяет удалять каталоги 
// (используя rmdir ), но в настоящее время у сервера нет никакого 
// способа для их создания.
// Добавьте поддержку метода MKCOL (от make collection - •создать коллекцию•), 
// который должен создавать каталог, вызывая mkdir из модуля fs. MKCOL
// не является широко распространенным методом НТТР, но он существует
// для этой же цели в стандарте WebDAV, определяющем набор соглашений поверх 
// НТТР,  благодаря чему НТТР становится пригодным для создания документов. 
console.log('=== Chapter 2.2 Создание каталога');
//#endregion

//#region Chapter 20.3 Публичное пространство в сети 
// Поскольку файловый сервер обслуживает все типы файлов и даже содержит 
// правильный заголовок Content- Туре, его можно использовать для
// обслуживания сайта. Так как сервер позволяет всем желающим удалять
// и заменять файлы, это будет интересный вид сайта: сайт, который может
// быть изменен, улучшен и разрушен каждым, кто не поленится создать правильный 
// НТТР-запрос.

// Напишите минимальную НТМL-страницу, включающую в себя простой
// файл JavaScript. Поместите файлы в каталог, обслуживаемый файловым
// сервером, и откройте их в браузере.

// Затем в качестве расширенного упражнения или даже проекта выходного
// дня объедините все знания, почерпнутые вами из этой книги, и создайте
// более удобный интерфейс для изменения сайта - изнутри сайта.
// Используйте НТМL-форму для редактирования содержимого файлов, 
// составляющих сайт, которая давала бы пользователю возможность обновлять
// их на сервере с помощью НТТР-запросов, как описано в главе 18.

// Начните с редактирования только одного файла. Затем сделайте так,
// чтобы пользователь мог выбрать, какой файл редактировать. Используйте
// тот факт, что наш файловый сервер возвращает списки файлов при чтении
// каталога.

// Не работайте напрямую с кодом, предоставляемым файловым сервером,
// поскольку если вы допустите ошибку, то, скорее всего, повредите файлы.
// Вместо этого держите свою работу вне общедоступного каталога и копируйте 
// ее туда во время тестирования. 
console.log('=== Chapter 2.3 Публичное пространство в сети');
//#endregion


// Модуль НTTP ======================================================= 418
import { createServer } from "http";
let server = createServer((request, response) => {
  response.writeHead(200, {"Content-Type": "text/html"});
  response.write(`
    <h1>Hello!</h1>
    <p>You asked for <code>${request.url}</code></p>`);
  response.end();
});
server.listen(8000);
console.log("Listening! (port 8000)");